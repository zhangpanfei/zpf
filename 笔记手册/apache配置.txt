1.压力测试工具
bin/ab.exe
ab.exe  -n访问的总的次数  -c用户并发数量（有多少人同时访问）网站的地址。

2.apache是什么MPM(多路处理模块), 通俗讲就是apache处理多并发的方式
常见的有三种 
（1）perfork(预派生模式) 
 
（2）worker(工作者模式) 
 
（3）winnt模式(windows下默认的模式)
 
 查看当前的MPM  httpd.exe -l


3.配置MPM(多路处理模块)的问题，调整最大的并发量。

（1）打开apache的配置文件 httpd.conf,开启多路处理模型
 Include conf/extra/httpd-mpm.conf

（2）打开extra目录下面的httpd-mpm.conf辅助配置文件。
 <IfModule mpm_winnt_module>
    ThreadsPerChild      150   //150改成1000
    MaxRequestsPerChild    0
</IfModule>

4.如何配置缓存
（1）打开apache的主配置文件（httpd.conf）开启缓存模块
打开apache的expires扩展，利用该扩展控制图片,css,html等文件控制缓存是否缓存，及缓存声明周期。
 LoadModule expires_module modules/mod_expires.so

 （2）配置选项设置

ExpiresActive On     //开启缓存设置
//具体的针对文件类型设置缓存规则。
ExpiresDefault "<base> [plus] {<num> <type>}*"//默认设置
ExpiresByType type/encoding "<base> [plus] {<num> <type>}*"//针对不同文件类型进行设置。

（3）具体的配置步骤：
为了测试：新建一个虚拟主机：
<VirtualHost *:80>
	DocumentRoot "D:/php/apache/htdocs/cache/"
	ServerName zz.cache.com
	DirectoryIndex index.php index.html
	<Directory />
	    ExpiresActive On #开启缓存
	    ExpiresByType image/jpeg "access plus 10 days" #image/jpeg类型的文件缓存10天 注：后面不能有注释
	    Options FollowSymLinks
	    AllowOverride None
	    Order allow,deny
	    Allow from all
	 </Directory>
</VirtualHost>

5.针对某些文件，不让他缓存，始终从服务器中获取内容。
比如案例：不缓存gif文件。
思路，打开apache主配置文件，中header模块，配置该选项：cache-control:no-store,must-revalidate,
具体 的步骤：
（1）开启header模块。
 LoadModule headers_module modules/mod_headers.so
 具体的配置：思路是针对gif格式的文件。
 在虚拟主机里面进行如下配置：
 <filesMatch "\.(gif)$">
 header set cache-control 'no-store,must-revalidate'
 </filesMatch>

6.配置压缩
常见的gzip压缩，deflate压缩，compress压缩以及google、chrome正在推的sdcn压缩。

具体的配置步骤：
（1）在apache的主配置文件中，开启压缩配置，apache默认是deflate压缩。
 LoadModule deflate_module modules/mod_deflate.so

（2）在虚拟主机里面配置
 <ifmodule mod_deflate.c>
  DeflateCompressionLevel 6#压缩级别1~9
  AddOutputFilterByType DEFLATE text/plain #压缩文本文件
  AddOutputFilterByType DEFLATE text/html #压缩html文件
 </ifmodule>

案例：
 <VirtualHost *:80>
	DocumentRoot "D:/php/apache/htdocs/cache/"
	ServerName zz.cache.com
	DirectoryIndex index.php index.html
	<Directory "D:/php/apache/htdocs/cache/">
	    expiresactive on #开启缓存
	    ExpiresByType image/jpeg "access plus 10 days"
	    <filesMatch "\.(png)$">
		header set cache-control 'no-store,must-revalidate'
	    </filesMatch>
	    AllowOverride None
	    Order allow,deny
	    Allow from all
	 </Directory>
	 <ifmodule mod_deflate.c>
		DeflateCompressionLevel 6#压缩级别1~9
		AddOutputFilterByType DEFLATE text/plain #压缩文本文件
		AddOutputFilterByType DEFLATE text/html #压缩html文件
		AddOutputFilterByType DEFLATE image/png #压缩html文件
	</ifmodule>
</VirtualHost>


7.rewrite机制的具体配置：
（1）打开apahce的主配置文件（httpd.conf）,开启rewrite模块。
 LoadModule rewrite_module modules/mod_rewrite.so
 
 比如请求的url   
 http://www.abc.com/news-music-id100.html 
转换成请求：news.php?type=music&id=100页面
具体的配置：
<Directory "D:/php/apache/htdocs/cache/">
RewriteEngine On #开启重写引擎
rewriterule (\w+)-(\w+)-id([0-9]+)\.html$  $1.php?type=$2&id=$3
</Directory>


 (2)配置是否显示文件目录：[indexes|none]
    Options indexes FollowSymLinks  //配置显示文件目录，如果没有配置欢迎页面

 (3)配置错误跳转页面。主要防止用户请求的页面不存在，如果用户访问的页面不存在，则给一个友好的提示。
    #errordocument 404 '页面不存在';
    #errordocument 404  /??.html;
    errordocument 404  http://xxxx;

  (4)站内配置
  可以新建一个.htaccess文件，具体的内容可以在该文件进行配置。
  要注意：要使该文件有效，则必须在虚拟主机里面设置。AllowOverride All
  <ifmodule rewrite_module>
  rewriteengine on
  rewriterule abc.html test.php
  errordocument 404 notfound
  </ifmodule>


8.防盗链
 <ifmodule rewrite_module>
  #遇到非zz.cache.com域名则...
  rewritecond %{HTTP_REFERER} !zz.cache.com
  rewriterule .*\.jpg$ [F] #禁止显示图片
  rewriterule .*\.png$ error.gif #url重写
 </ifmodule>

9.memcache概念
磁盘缓存(页面静态化)
内存缓存(memcache/redis)
memcache是bs架构,数据存储到内存中,存储格式是键值对

安装
在控制台进入memcached.exe目录下
memcached.exe -d install

启动 memcached.exe -d start

在启动时指定的一些基本命令；
-p 监听的端口 
-l <ip地址>绑定地址（默认：所有都允许，无论内外网或者本机ip,有安全隐患，若设置为127.0.0.1就只能本机访问）
-d start 启动memcached服务 
-d restart 重起memcached服务 
-d stop|shutdown 关闭正在运行的memcached服务 
-d install 安装memcached服务 
-d uninstall 卸载memcached服务
-u 以的身份运行 (仅在以root运行的时候有效) 
-m 最大内存使用，单位MB。默认64MB 
-M 内存耗尽时返回错误，而不是删除项 
-c 最大同时连接数，默认是1024 
-f 块大小增长因子，默认是1.25 
-n 最小分配空间，key+value+flags默认是48 
-h 显示帮助


10.使用telnet来进行连接到memcache服务器（类似于黑窗口）
连接方式：telnet ip地址  端口号
telnet localhost 11211

增删改查操作
1、添加数据
add 键的名称  0  缓存的时间  数据的长度  (回车后添加内容)  0表示不压缩：
比如：add name 0 60 5   表示向memcache里面添加的数据键为name    缓存的周期是60秒，数据的长度是5.

2、获取数据
get 键名

3、修改数据
set set 指令也可以替换数据，如果键存在则替换，如果不存在，则等于添加。
replace 要求键名必须存在，如果不存在，则提示一个错误。

4、删除数据
基本语法：delete  键名称 
flush_all 清空所有的数据

5、查看状态stats
为了测试memcache的效率，获取的查询的成功率,也就是memcache 的效率，get_hits/cmd_get

11.通过php来连接memcache服务器。

（1）从网上下载memcache php的扩展，该扩展要和php的版本一致。
要下载php版本对应的memcache的扩展。
（2）把对应的memcache扩展拷贝到php安装目录的ext下面。
（3）打开php.ini文件加载该扩展
自己写入：extension=php_memcache.dll

示例代码
<?php
//初始化类
$mem=new Memcache();
//连接memcache服务器，返回值布尔
$a=$mem->connect('localhost',11211);
//存储字符串，返回值为布尔，使用MEMCACHE_COMPRESSED标记对数据进行压缩
$mem->add('name','haha',MEMCACHE_COMPRESSED,120) or die('str no');
//存储字符串(以序列化方式存储)
$arr=array('a','b','c');
$mem->add('arr',$arr,MEMCACHE_COMPRESSED,120) or die('arr no');
//存储对象(以序列化方式存储)
class Cat{}
$cat=new Cat();
$cat->name='cat';
$cat->color='bai';
$mem->add('obj',$cat,MEMCACHE_COMPRESSED,120)or die('obj no');
//取出数据（在另外一个脚本里取出对象时要有该对象类的声明）
echo $mem->get('name');
var_dump($mem->GET('arr'));
var_dump($mem->get('obj'));
?>

在php.ini文件中，我们可以设置session存储方式。
session.save_handler = files [user|memcache] 【三种取值.】

设置存储位置：
设置php.ini中session.save_path=‘tcp://localhost:11211’（可以是用逗号分隔的列表）
比如：session.save_path=‘tcp://localhost:11211,tpc://192.168.1.89:11211’

要注意：session文件存储到memcache里面是通过sessionid做为键的。
把session文件给出存储到memcache里面后，不影响session的任何操作。

要注意：
//除了可以在php.ini文件中设置session保存到memcache外，我们还可以直接在文件中设置，其实这样更好，因为
		//不会影响到别人的使用session的方式.	
		ini_set("session.save_handler","memcache");
		ini_set("session.save_path","tcp://localhost:11211");


12.memcache分布式存储
在网站的架构中可以架构多台memcache服务器，数据是分布存储的。
<?php
	$mem=new memcache();
//可以分布存储数据到多台memcache服务器,使用memcache::addServer('IP地址','端口号')
	$mem->addserver('127.0.0.1',11211);
	$mem->addserver('127.0.0.1',11210);
	$mem->set('name','hui',0,120);
	$mem->set('age','18',0,120);
	$mem->set('height','175',0,120);
	echo $mem->get('name'),$mem->get('age'),$mem->get('height');
?>


13.memcache的细节讨论:
1、生命周期的问题：
生命周期设置方式有两种：
第一种是：秒数，但是有限制，不能超过 2592000秒（30天）。
第二种是：时间戳，比如我们要设置超过1个月，则如下设置
$mem->add('name1','yangguang',MEMCACHE_COMPRESSED,time()+3600*24*31);
如果设置为0，则表示永不过期。
存储到memcache里面的数据，什么情况下会丢失：
（1）生命周期到了
（2）关闭memcache服务
（3）关机，重启。
2、memcache中善于存储哪些数据
（1）更新比较频繁的数据（用户的在线状态），查询比较频繁，数据量不是很大。
（2）安全性不是很高。
如果没有memcache这个产品，可以通过mysql的memory存储引擎。

3、memcache的安全性。
 

memcache安全性 
（1）内网（两块网卡，memcache在启动时指定那台访问） 
memcached –d –u root –l 192.168.1.100 –p 11211.指定只有192.168.1.100服务器才能访问。 
（2）防火墙 
在linux中，设置命令。 
iptables -a input -p 协议 -s 可以访问ip -dport 端口 -j ACCEPT
例如： 
iptables –a input –p tcp –s 192.168.1.1 –dport 11211 –j ACCEPT
iptables –a input –p tcp –s 192.168.1.1 –dport 11211 –j ACCEPT
4、Memcached机制深入了解
①基于c/s架构，协议简单
②基于libevent的事件处理
③内置内存存储方式
④基于客户端的分布式


定位慢查询。
慢查询：找出在一个网站中，查询速度比较慢的语句，可以开启一个日志文件，记录查询速度比较慢的sql语句。在默认情况下，慢查询日志是关闭的，默认记录时间是超过10秒 的sql语句。
1、以记录慢查询的方式来启动mysql,
先关闭mysql,进入到mysql的安装目录。
关闭mysql服务：可以通过计算机-》管理->服务-》mysqld的服务名称，单击停止。

{mysql的安装目录}>bin/mysqld.exe   --safe-mode  --slow-query-log 
通过慢查询日志定位执行效率较低的SQL语句。慢查询日志记录了所有执行时间超过long_query_time所设置的SQL语句。

2、查看慢查询日志的存储路径。
开启了慢查询日志后，会建立一个慢查询日志文件。该日志文件保存在数据库的目录下，数据库的目录可以通过配置文件查看。


3.测试
查看当前数据库下慢查询记录时间：
show variables like ‘long_query_time’;
 
修改慢查询时间：
set long_query_time=1; 

数据库函数测试
select benchmark(20000000,10000*10+1+2+888);


索引

1、主键索引
可以在建立表的添加create table emp(id int primary key)
可以在建立完表之后，添加：alter table tablename add primary key(列1,列2)
主键索引的特点： 
（1）一个表中最多只有一个主键索引 
（2）一个主键索引可以指向多个列 
（3）主键索引的列，不能有重复的值，也不能有null
（4）主键索引的效率高。

2、唯一索引
可以在建立表的时候添加：create table emp(name varchar(32) unique)
在建完表之后，添加：
alter table tablename add unique [索引名](列名)
 
唯一索引的特点： 
（1）一个表中可以有多个唯一索引 
（2）一个唯一索引可以指向多个列 ，
比如alter table tablename add unique [索引名](列1，列2)
（3）如果在唯一索引上，没有指定not  null，则该列可以为空，同时可以有多个null,
（4）唯一索引的效率较高。

3、普通索引
使用普通索引主要是提高查询效率

添加alter table tablename add index [索引名]（列1，列3）
 

4、全文索引
mysql自带的全文索引mysql5.5不支持中文，支持英文，同时要求表的存储引擎是myisam。如果希望支持中文，有两个方案， 
（1）使用aphinx中文版coreseek (来替代全文索引)
（2）插件mysqlcft。
5、查看索引
（1）show  index from  表名 
（2）show  indexes from 表名 
（3）show  keys from 表名 
（4）desc 表名
6、删除索引
（1）主键索引的删除：
alter table tablename drop primary key;要注意：在删除主键索引时，要首先去掉auto_increment属性。
 
（2）唯一索引的删除
alter table tablename drop index 唯一索引的名字
 
（3）普通索引的删除：
alter table tablename drop index 普通索引的名字



explain工具的讲解

该工具能够分析sql执行效率，但是并不执行sql语句。主要是查看sql语句是否用到索引。
语法：explain  sql语句\G   或 desc sql语句\G 
使用索引时：

没有使用索引时：

explain工具的参数说明：
会产生如下信息：
select_type:表示查询的类型。
table:输出结果集的表
type:表示表的连接类型
possible_keys:表示查询时，可能使用的索引
key:表示实际使用的索引
key_len:索引字段的长度
rows:扫描出的行数(估算的行数)
Extra:执行情况的描述和说明


索引应用讲解：
1、对于创建的多列(复合)索引，只要查询条件使用了最左边的列，索引一般就会被使用。
mysql> alter table user add index (name,email);
2、对于使用like的查询，查询如果是”%XXX”,不会使用到索引，‘XXX%’会使用到索引。
3、如果条件中有or，则要求or的索引字段都必须有索引，否则不能用到索引。
4、如果列类型是字符串，一定要在条件中将数据使用引号引用起来，否则不使用索引。
5、优化group by语句 
默认情况下， mysql对所有的group by col1,col2进行排序。这与在查询中指定order by col1,col2类型，如果查询中包括group by 但用户想要避免排序结果的消耗，则可以使用order by null禁止排序。
6、当取出的数据量超过表中数据的20%，优化器就不会使用索引，而是全表扫描。 
扫描的行数太多了，优化器认为全表扫描比索引来的块。 
7、查看索引的使用情况
show status like 'Handler_read%';
注意：
handler_read_key:这个值越高越好，越高表示使用索引查询到的次数。
handler_read_rnd_next:这个值越高，说明查询低效。
8、对应大批量插入数据，需要注意的：
大批量插入数据(MySql管理员) 了解
对于MyISAM：
先禁用索引：
alter table table_name disable keys;
loading data//insert语句; 执行插入语句
执行完成插入语句后，开启索引，统一添加索引。
alter table table_name enable keys;
对于Innodb：
1，将要导入的数据按照主键排序
2，set unique_checks=0,关闭唯一性校验。
3，set autocommit=0,关闭自动提交。



并发处理的锁机制
锁机制：在执行时，只有一个用户获得锁，其他用户处于阻塞状态，需要等待解锁。
mysql 的锁有以下几种形式：
表级锁：开销小，加锁快，发生锁冲突的概率最高，并发度最低。myisam引擎属于这种类型。
行级锁：开销大，加锁慢，发生锁冲突的概率最低，并发度也最高。innodb属于这种类型。
1、表锁的演示； 
对myisam表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其他进程的操作。 
表添加读锁后，其他进程对该表只能查询操作，修改时会被阻塞。
当前进程，能够执行查询操作，不能执行修改操作。不能对没有锁定的表进行操作。
锁表的语法：
lock table 表名 read|write
也可以锁定多个表，语法是：lock table 表1 read|wirte,表2 read|wirte
对myisam表的写操作（加写锁），会阻塞其他进程对锁定表的任何操作，不能读写，
表加写锁后，则只有当前进程对锁定的表，可以执行任何操作。其他进程的操作会被阻塞。
解锁的语法
unlock tables;
2、行锁的演示 
innodb存储引擎是通过给索引上的索引项加锁来实现的，这就意味着：只有通过索引条件检索数据，innodb才会使用行级锁，否则，innodb使用表锁。
行锁的语法：
begin;
sql语句; 
commit; 
开启行锁后，当前进程在针对某条记录执行操作时，其他进程不能操作和当前进程相同id的记录。
php里面有文件锁，在实际的项目中多数使用文件锁，因为表锁，会阻塞，当对一些表添加写锁后，其他进程就不能操作了。这样会阻塞整个网站，会拖慢网站的速度。



分区技术
就是把一个表存储到磁盘不同区域，仍然是一张表。
1、基本的概念：
mysql5.1后有4种分区类型： 
（1）Range（范围）–这种模式允许将数据划分不同范围。例如可以将一个表通过年份划分成若干个分区。 
（2）List（预定义列表）–这种模式允许系统通过预定义的列表的值来对数据进行分割
（3）Hash（哈希）–这中模式允许通过对表的一个或多个列的Hash Key进行计算，最后通过这个Hash码不同数值对应的数据区域进行分区。例如可以建立一个对表主键进行分区的表。 
（4）Key（键值）-上面Hash模式的一种延伸，这里的Hash Key是MySQL系统产生的。 
2 range分区： 
假如你创建了一个如下的表，该表保存有20家超市的职员记录，这20家超市的编号从1到20.如果你想将其分成4个小分区，可以采用range分区，创建的数据表如下。
创建range分区语法：
create table emp( 
    id int not null, 
    name varchar(32) not null default '' comment '职员的名称', 
    store_id int not null comment '超市的编号范围是1-20'
)engine myisam charset utf8 
partition by range(store_id)( 
    partition p0 values less than(6), #是store_id的值小于6的存储区域。
    partition p1 values less than(11), #是store_id的值大于等于6小于11的存储区域。
    partition p2 values less than(16), 
    partition p3 values less than(21) 
) 
insert into emp values(1,’杨过’,1)--数据是存储到p0区
insert into emp values(23,’小龙女’,15)--数据是存储到p2区
insert into emp values(100,’李莫愁’,11)=数据是存储到p2区。
查看是否从分区取出数据：
explain partitions select * from emp where story_id=11\G
在取出数据时，条件中必须partition by range(store_id)，range里面的字段。
3、list分区与range分区有类似的地方
create table emp( 
    id int not null, 
    name varchar(32) not null default '', 
    store_id int not null 
) 
partition by list(store_id)( 
    partition p0 values in(5,6,7,8), 
    partition p1 values in(11,3,12,11), 
    partition p2 values in(16), 
    partition p3 values in(21) 
) 
注意：在使用分区时，where后面的字段必须是分区字段，才能使用到分区。
4、分区表的限制；
（1）只能对数据表的整型列进行分区，或者数据列可以通过分区函数转化成整型列
（2）最大分区数目不能超过1024 
（3）如果含有唯一索引或者主键，则分区列必须包含在所有的唯一索引或者主键在内
（4）按日期进行分区很非常适合，因为很多日期函数可以用。但是对于字符串来说合适的分区函数不太多 。

其他调优：
1、选择合适的存储引擎 （myisam innodb）
•	MyISAM:默认的MySQL存储引擎。如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性要求不是很高。其优势是访问的速度快。(尤其适合论坛的帖子表)
•	InnoDB：提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比MyISAM，写的处理效率差一些并且会占用更多的磁盘空间(如果对安全要求高，则使用innodb)。[账户，积分]
•	Memory/heap [一些访问频繁，变化频繁，又没有必要入库的数据 ：比如用户在线状态]
•	说明: memory表的数据都在内存中，因此操作速度快，但是缺少是当mysql重启后，数据丢失，但表的结构在.
•	注：从mysql5.5.x开始，默认的存储引擎变更为innodb，innodb是为处理巨大数据量时拥有最大性能而设计的。它的 cpu效率可能是任何其他基于磁盘的关系数据库引擎所不能匹敌的。
2、数据类型的选择
（1）在精度要求高的应用中，建议使用定点数来存储数值，以保证结果的准确性。decimal 不要用float
（2）要用于存储手机号，哪个类型比较合适。假如我们要用char(11),如果字符集是utf8 则占用多少个字节。11*3==33,如果是gbk字符集则占用11*2=22个字节，
如果用bigint型存储，则占用8个字节，
（3）如果要存储ip地址。假如用char(15)占用很多字节，能否用整型来存储呢？
可以通过一个函数，把ip地址转换成整数。可以使用int来存储
inet_aton()：把ip地址转换成整数。
inet_ntoa()：把整数转换成ip地址。 
（4）根据需求选择最小整数类型。比如用户在线状态：离线，在线，离开，忙碌，隐式等，可以采用0,1,2,3,5来表示，没有必要用char()或varchar()型来存储字符串。
3、myisam表的定时维护
对于myisam 存储引擎而言，需要定时执行optimize table 表名，通过optimize table语句可以消除删除和更新造成的磁盘碎片，从而减少空间的浪费。
语法格式：optimize table  表名


